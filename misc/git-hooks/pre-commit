#!/nix/store/vqvj60h076bhqj6977caz0pfxs6543nb-bash-5.2-p15/bin/bash
#!/usr/bin/env bash

set -eo pipefail

# https://stackoverflow.com/a/72183258/134409
# this hangs in CI (no tty?)
# yes 'will cite' | parallel --citation 2>/dev/null 1>/dev/null || true
if [ -n "${HOME:-}" ] && [ -d "$HOME" ]; then
  mkdir -p "$HOME/.parallel"
  touch "$HOME/.parallel/will-cite"
fi

set +e
git diff-files --quiet
is_unclean=$?
set -e

# Revert `git stash` on exit
function revert_git_stash {
  >&2 echo "Unstashing uncommitted changes..."
  git stash pop -q
}

# Stash pending changes and revert them when script ends
if [ -z "${NO_STASH:-}" ] && [ $is_unclean -ne 0 ]; then
  >&2 echo "Stashing uncommitted changes..."
  GIT_LITERAL_PATHSPECS=0 git stash -q --keep-index
  trap revert_git_stash EXIT
fi

export git_ls_files
git_ls_files="$(git ls-files)"
export git_ls_nonbinary_files
git_ls_nonbinary_files="$(echo "$git_ls_files" | xargs file --mime | grep -v "; charset=binary" | cut -d: -f1)"

export git_ls_nonbinary_files
git_ls_nonbinary_files="$(echo "$git_ls_files" | xargs file --mime | grep -v "; charset=binary" | cut -d: -f1)"


function check_cargo_fmt() {
    set -euo pipefail

    cargo fmt --all --check

}
export -f check_cargo_fmt

function check_cargo_lock() {
    set -euo pipefail

    # https://users.rust-lang.org/t/check-if-the-cargo-lock-is-up-to-date-without-building-anything/91048/5
    cargo update --workspace --locked

}
export -f check_cargo_lock

function check_clippy() {
    set -euo pipefail

    cargo clippy --workspace --all-targets -- --deny warnings --allow deprecated

}
export -f check_clippy

function check_leftover_dbg() {
    set -euo pipefail

    errors=""
    for path in $(echo "$git_ls_nonbinary_files" | grep  '.*\.rs'); do
      if grep 'dbg!(' "$path"  > /dev/null; then
        >&2 echo "$path contains dbg! macro"
        errors="true"
      fi
    done

    if [ -n "$errors" ]; then
      >&2 echo "Fix the problems above or use --no-verify" 1>&2
      return 1
    fi

}
export -f check_leftover_dbg

function check_semgrep() {
    set -euo pipefail

    # semgrep is not available on MacOS
    if ! command -v semgrep > /dev/null ; then
      >&2 echo "Skipping semgrep check: not available"
      return 0
    fi

    if [ ! -f .config/semgrep.yaml ] ; then
      >&2 echo "Skipping semgrep check: .config/semgrep.yaml doesn't exist"
      return 0
    fi

    if [ ! -s .config/semgrep.yaml ] ; then
      >&2 echo "Skipping semgrep check: .config/semgrep.yaml empty"
      return 0
    fi

    env SEMGREP_ENABLE_VERSION_CHECK=0 \
      semgrep -q --error --config .config/semgrep.yaml

}
export -f check_semgrep

function check_shellcheck() {
    set -euo pipefail

    for path in $(echo "$git_ls_nonbinary_files" | grep -E '.*\.sh$')  ; do
      shellcheck --severity=warning "$path"
    done

}
export -f check_shellcheck

function check_typos() {
    set -euo pipefail

    if ! echo "$git_ls_nonbinary_files" | typos --stdin-paths ; then
      >&2 echo "Typos found: Valid new words can be added to '_typos.toml'"
      return 1
    fi

}
export -f check_typos

parallel \
::: \
    check_cargo_fmt \
    check_cargo_lock \
    check_clippy \
    check_leftover_dbg \
    check_semgrep \
    check_shellcheck \
    check_typos \
    # newline for the last \ to work

